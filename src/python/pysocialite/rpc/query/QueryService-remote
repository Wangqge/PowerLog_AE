#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from pysocialite.rpc.query import QueryService
from pysocialite.rpc.query.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void gc()')
  print('  void runSimple(QueryMessage query)')
  print('  void run(QueryMessage query, string addr, i32 port, i64 queryid)')
  print('  TTuple getFirstTuple(QueryMessage query)')
  print('  void clear(string table)')
  print('  void drop(string table)')
  print('  string getEnumKey(string kind, i32 id)')
  print('  i32 getEnumId(string kind, string key)')
  print('   getEnumKeyList(string kind)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = QueryService.Client(protocol)
transport.open()

if cmd == 'gc':
  if len(args) != 0:
    print('gc requires 0 args')
    sys.exit(1)
  pp.pprint(client.gc())

elif cmd == 'runSimple':
  if len(args) != 1:
    print('runSimple requires 1 args')
    sys.exit(1)
  pp.pprint(client.runSimple(eval(args[0]),))

elif cmd == 'run':
  if len(args) != 4:
    print('run requires 4 args')
    sys.exit(1)
  pp.pprint(client.run(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'getFirstTuple':
  if len(args) != 1:
    print('getFirstTuple requires 1 args')
    sys.exit(1)
  pp.pprint(client.getFirstTuple(eval(args[0]),))

elif cmd == 'clear':
  if len(args) != 1:
    print('clear requires 1 args')
    sys.exit(1)
  pp.pprint(client.clear(args[0],))

elif cmd == 'drop':
  if len(args) != 1:
    print('drop requires 1 args')
    sys.exit(1)
  pp.pprint(client.drop(args[0],))

elif cmd == 'getEnumKey':
  if len(args) != 2:
    print('getEnumKey requires 2 args')
    sys.exit(1)
  pp.pprint(client.getEnumKey(args[0],eval(args[1]),))

elif cmd == 'getEnumId':
  if len(args) != 2:
    print('getEnumId requires 2 args')
    sys.exit(1)
  pp.pprint(client.getEnumId(args[0],args[1],))

elif cmd == 'getEnumKeyList':
  if len(args) != 1:
    print('getEnumKeyList requires 1 args')
    sys.exit(1)
  pp.pprint(client.getEnumKeyList(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
